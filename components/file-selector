<template>
  <CModal :visible="visible" @close="close(false)">
    <CModalHeader>
      <CModalTitle>文件夹选择</CModalTitle>
    </CModalHeader>
    <CModalBody>
      <CModalTitle>
        当前文件夹：
        <span class="path">{{cur_folder_path_c}}</span>
        <button class="btn-secondary btn btn-sm" @click="turnUpFolder" :title="turn_up_tip">
          <font-awesome-icon icon="turn-up" />
        </button>
      </CModalTitle> 
    </CModalBody>
    <CModalBody>
      <CListGroupItem v-for="e,i in current_files" :key="i" >
        <input type="checkbox" id="checkBoxFile{{i}}" v-model="checked_box" :value="cur_folder_path_c+e.folder_name" @click="chooseFolder"/> <!-- v-model="checked_box" -->
        <a v-if="e.dir" href="#" class="subFolder" @click="listSubfolder">
          {{ e.folder_name }}
          <slot name="slot1"></slot>
        </a> 
        <span v-if="!e.dir" class="subFolder">{{ e.folder_name }}</span>
      </CListGroupItem>
    </CModalBody>
    <CModalBody>
      已选文件或文件夹：
      <CBadge v-for="sf,i in selected_files" :key="i" color="info">{{sf}}</CBadge>
    </CModalBody>
    <CModalBody>
      <button class="btn btn-primary "  @click="submitFiles">确认</button><!--nextstep btn-next-->
      <button class="btn btn-primary "  @click="nextstep">取消</button>
    </CModalBody>
  </CModal>
</template>

<script>
export default {
  name: 'FileSelector',
  props: ['title', 'body', 'verify_input', 'close_only', 'ok_button_text', 'cancel_button_text', 'cur_folder_path'],
  components: {
  },
  data: function () {
    return {
      verify_input_: '',
      visible: false,
      cb: null,
      current_files: [],
      curfolder_name: '',
      checked_box: [],
      turn_up_tip: '返回',
      selected_files: [],
      cur_folder_path_c: this.cur_folder_path,
    };
  },
  computed: {
    can_delete: function() {
      return !this.verify_input || this.verify_input == this.verify_input_;
    },
  },
  methods: {
    show: async function(cb) {
      this.cb = cb;
      this.visible = true;

    },
    hide: function() {
      this.visible = false;
    },
    close: function(ok) {
      this.visible = false;
      if (this.cb) {
        this.cb(ok);
      }
      this.$emit('close', ok);
    },

    listSubfolder: function(e) {
      this.cur_folder_path_c = this.cur_folder_path_c + e.target.outerText
      this.apiListAllFiles()
    },

    chooseFolder: function(e){
      let selected_folder = e.target.value

      if(e.target.checked){
        this.selected_files.push(selected_folder)
        this.checked_box.push(selected_folder)
      }else{
        this.selected_files.splice(this.selected_files.indexOf(selected_folder),1)
        this.checked_box.splice(this.checked_box.indexOf(selected_folder),1)
      }
    },

    turnUpFolder: function(){
      let special_index = this.cur_folder_path_c.lastIndexOf("/",this.cur_folder_path_c.length-2) 
      this.cur_folder_path_c = this.cur_folder_path_c.substr(0,special_index+1)// get turnUpFolder
      this.apiListAllFiles()
    },

    apiListAllFiles: function(){
      //this.current_files = this.$root.api_get("/api/v1"+this.cur_folder_path)
      if(this.cur_folder_path_c.match(/\//g).length == 1){//test data
        this.current_files = [
          {folder_name: "file1.txt", dir: false }, 
          {folder_name: "file2.jpg", dir: false }, 
          {folder_name: "subFolder/", dir: true}
        ]
      }else if(this.cur_folder_path_c.match(/\//g).length == 2){
        this.current_files = [
          {folder_name: "file3.txt", dir: false }, 
          {folder_name: "file4.jpg", dir: false }, 
          {folder_name: "file5.vue", dir: false }, 
          {folder_name: "sSubFolder/", dir: true}
        ]
      }else if(this.cur_folder_path_c.match(/\//g).length == 3){
        this.current_files = [
          {folder_name: "file6.txt", dir: false }, 
          {folder_name: "file7.vue", dir: false }, 
          {folder_name: "file8.jpg", dir: false }, 
          {folder_name: "ssSubFolder/", dir: true}
        ]
      }else if(this.cur_folder_path_c.match(/\//g).length == 4){
        this.current_files = [
          {folder_name: "file9.txt", dir: false },
          {folder_name: "file10.vue", dir: false }
        ]
      }
      
      this.current_files.forEach(
        (item,index) => {
          if(this.selected_files.indexOf(this.cur_folder_path_c+item.folder_name)>=0){
            debugger
            console.log(item,index)
          }
        }
      )
    },

    submitFiles: function(){
      this.$emit('getSelectedFiles',this.selected_files)
      this.hide()
    },
  },

  created() {
    console.log('created')
    //this.current_files = this.$root.api_get("/api/v1/listFolder/")
  },
  mounted() {
    console.log('mounted')
    this.current_files = [
      {folder_name: "file1.txt", dir: false }, 
      {folder_name: "file2.jpg", dir: false }, 
      {folder_name: "subFolder/", dir: true}
    ]
  },
  updated() {
    console.log('updated')
  },
}
</script>

<style scoped>
button {
  margin-right: 1rem;
}
.path{
  margin-left: 0.5rem;
  margin-right: 2rem;
}
.subFolder{
  margin-left: 1rem;
}
.badge{
  margin-right:0.5rem;
}

</style>
